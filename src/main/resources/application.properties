# Port-ul pe care asculta backend-ul
server.port = 8081
# URL-ul DB-ului
spring.datasource.url = jdbc:mysql://localhost:3306/softbinator
# User-ul din DB
spring.datasource.username = awbd
# Parola user-ului din DB
spring.datasource.password = awbd
# Notifica aplicatia sa creeze automat tabelele in DB
# Se bazeaza pe modelele(entitatile) pe care le-am definit
spring.jpa.hibernate.ddl-auto = update
# Nu include stack trace-ul in raspuns la exceptie
server.error.include-stacktrace = never
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

# Denumirile din keycloak pentru realm-ul creat de voi, client aka resource
keycloak.realm = JavaLabs
keycloak.resource = labs
# Clientul creat de mine era public, puteti sa il creati si cu un secret
keycloak.public-client = true
# Link-ul pe care ruleza server-ul
keycloak.auth-server-url = http://localhost:8070/auth
# Requesturile pot fi autorizate doar cu bearer token (in Postman mai aveti si
# alte modalitati daca doriti sa testati)
keycloak.bearer-only = true

# Url de keycloak pentru feign client
my.keycloak.url = http://localhost:8070
# Endpoint-ul de token din keycloak, il puteti gasi si din interfata
my.keycloak.auth.endpoint = /auth/realms/JavaLabs/protocol/openid-connect/token
# Credentialele admin-ului: username, parola, client si realm (are permisiuni complete)
my.keycloak.admin.username = admin
my.keycloak.admin.password = admin
my.keycloak.admin.client = admin-cli
my.keycloak.admin.realm = master
